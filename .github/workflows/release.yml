name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Ferrite ${{ steps.get_version.outputs.version }}
        body: |
          ## Ferrite ${{ steps.get_version.outputs.version }}

          ### Installation

          #### Download Binary
          Download the appropriate binary for your platform from the assets below.

          #### Install from Source
          ```bash
          # Download the appropriate binary for your platform from the assets below
          # or install from source:
          cargo install --git https://github.com/raravena80/ferrite --tag ${{ steps.get_version.outputs.version }}
          ```

          ### Docker
          ```bash
          docker run --rm -p 8001:8001 -p 9001:9001 ferrite/ferrite:${{ steps.get_version.outputs.version }}
          ```

          ### Changes
          See the [CHANGELOG.md](CHANGELOG.md) for detailed release notes.
        draft: true
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: ferrite-linux-x86_64
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact-name: ferrite-linux-aarch64
            cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: ferrite-macos-x86_64
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: ferrite-macos-aarch64
            cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: ferrite-windows-x86_64.exe
            cross: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install protoc (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Install protoc (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install protobuf

    - name: Install protoc (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install protoc

    - name: Install cross-compilation dependencies
      if: matrix.cross
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install cross
      if: matrix.cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Prepare artifact
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mv target/${{ matrix.target }}/release/ferrite-server.exe ${{ matrix.artifact-name }}
        else
          mv target/${{ matrix.target }}/release/ferrite-server ${{ matrix.artifact-name }}
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact-name }}
        asset_name: ${{ matrix.artifact-name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    # Only publish for non-prerelease versions
    if: ${{ !contains(needs.create-release.outputs.version, '-') }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  docker-release:
    name: Docker Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ferrite/ferrite
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max