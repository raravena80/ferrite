name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

# Add explicit permissions for the entire workflow
permissions:
  contents: write  # Required for creating releases and uploading assets
  packages: write  # Required for Docker registry
  actions: read    # Required for workflow access

jobs:

  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: ferrium-linux-x86_64
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact-name: ferrium-linux-aarch64
            cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: ferrium-macos-x86_64
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: ferrium-macos-aarch64
            cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: ferrium-windows-x86_64.exe
            cross: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # protoc is now handled automatically by protoc-prebuilt in build.rs

    - name: Install cross-compilation dependencies
      if: matrix.cross
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install cross
      if: matrix.cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Prepare artifact
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mv target/${{ matrix.target }}/release/ferrium-server.exe ${{ matrix.artifact-name }}
        else
          mv target/${{ matrix.target }}/release/ferrium-server ${{ matrix.artifact-name }}
        fi

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Ferrium ${{ steps.get_version.outputs.version }}
        body: |
          ## Ferrium ${{ steps.get_version.outputs.version }}

          ### Installation

          #### Download Binary
          Download the appropriate binary for your platform from the assets below.

          #### Install from Source
          ```bash
          # Download the appropriate binary for your platform from the assets below
          # or install from source:
          cargo install --git https://github.com/raravena80/ferrium --tag ${{ steps.get_version.outputs.version }}
          ```

          ### Docker
          ```bash
          # Pull from GitHub Container Registry
          docker run --rm -p 8001:8001 -p 9001:9001 ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}

          # Or use the latest tag
          docker run --rm -p 8001:8001 -p 9001:9001 ghcr.io/${{ github.repository }}:latest
          ```

          ### Changes
          See the [CHANGELOG.md](CHANGELOG.md) for detailed release notes.
        files: ${{ matrix.artifact-name }}
        draft: true
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  # Disabled: publish-crate job removed since "ferrium" name is taken on crates.io
  # Re-enable this job if you rename the crate or want to publish under a different name

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Ferrium
          org.opencontainers.image.description=A distributed KV storage system built with openraft
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.get_version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max