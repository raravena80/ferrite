name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Ferrite ${{ steps.get_version.outputs.version }}
        body: |
          ## Ferrite ${{ steps.get_version.outputs.version }}
          
          ### Changes
          - See commit history for detailed changes
          
          ### Installation
          ```bash
          # Download the appropriate binary for your platform from the assets below
          # or install from source:
          cargo install --git https://github.com/raravena80/ferrite --tag ${{ steps.get_version.outputs.version }}
          ```
        draft: true
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          binary-suffix: ""
        - os: macos-latest
          target: x86_64-apple-darwin
          binary-suffix: ""
        - os: windows-latest
          target: x86_64-pc-windows-msvc
          binary-suffix: ".exe"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create archive name
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "ARCHIVE_NAME=ferrite-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip" >> $GITHUB_ENV
        else
          echo "ARCHIVE_NAME=ferrite-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Create release archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ env.ARCHIVE_NAME }} ferrite-server${{ matrix.binary-suffix }}

    - name: Create release archive (Windows)  
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd target/${{ matrix.target }}/release
        Compress-Archive -Path "ferrite-server${{ matrix.binary-suffix }}" -DestinationPath "../../../${{ env.ARCHIVE_NAME }}"

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_NAME }}
        asset_name: ${{ env.ARCHIVE_NAME }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Verify version matches tag
      run: |
        cargo_version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
        tag_version=${GITHUB_REF#refs/tags/v}
        if [ "$cargo_version" != "$tag_version" ]; then
          echo "Cargo.toml version ($cargo_version) does not match tag ($tag_version)"
          exit 1
        fi

    - name: Login to crates.io
      run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Publish to crates.io
      run: cargo publish

  docker-release:
    name: Build and Push Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'workflow_dispatch' || github.repository_owner == 'your-username'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: your-username/ferrite
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'workflow_dispatch' || github.repository_owner == 'your-username' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 