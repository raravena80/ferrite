syntax = "proto3";

package ferrite.raft;

// Raft Service for internal Raft communication
service RaftService {
  // Append entries RPC
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  
  // Vote RPC for leader election
  rpc Vote(VoteRequest) returns (VoteResponse);
  
  // Install snapshot RPC
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
}

// Append Entries RPC
message AppendEntriesRequest {
  Vote vote = 1;
  optional LogId prev_log_id = 2;
  repeated Entry entries = 3;
  optional LogId leader_commit = 4;
}

message AppendEntriesResponse {
  oneof result {
    AppendEntriesSuccess success = 1;
    AppendEntriesPartialSuccess partial_success = 2;
    AppendEntriesConflict conflict = 3;
    AppendEntriesHigherVote higher_vote = 4;
  }
}

message AppendEntriesSuccess {
  // Empty - success indicated by the oneof
}

message AppendEntriesPartialSuccess {
  uint64 matching = 1;
}

message AppendEntriesConflict {
  uint64 conflict_index = 1;
}

message AppendEntriesHigherVote {
  Vote vote = 1;
}

// Vote RPC
message VoteRequest {
  Vote vote = 1;
  optional LogId last_log_id = 2;
}

message VoteResponse {
  Vote vote = 1;
  bool vote_granted = 2;
  optional LogId last_log_id = 3;
}

// Install Snapshot RPC
message InstallSnapshotRequest {
  Vote vote = 1;
  SnapshotMeta meta = 2;
  uint64 offset = 3;
  bytes data = 4;
  bool done = 5;
}

message InstallSnapshotResponse {
  Vote vote = 1;
}

// Common Raft types
message Vote {
  uint64 term = 1;
  uint64 node_id = 2;
  bool committed = 3;
}

message LogId {
  uint64 term = 1;
  uint64 node_id = 2;
  uint64 index = 3;
}

message Entry {
  LogId log_id = 1;
  bytes payload = 2;
}

message SnapshotMeta {
  optional LogId last_log_id = 1;
  optional LogId last_membership = 2;
  SnapshotSignature signature = 3;
}

message SnapshotSignature {
  uint64 signature = 1;
} 